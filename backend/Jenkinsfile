@Library(value="global-lib@master", changelog=false)_

stage('Build') {
    node('gilda-stage') {
        node('gilda-stage') {
        
            git url: 'http://gitlab/GildaOpenSource/SoftwareGuildServer.git', branch: 'master'

            runNpmBuild (   repository: 'npm',
                            projName: "SoftwareGuildServer",
                            buildNum: "${BUILD_NUMBER}")
    
            bat 'tsc --noEmit'
    
            npmPublishBuild (projName: "SoftwareGuildServer",
    	                    buildNum: "${BUILD_NUMBER}")
        }
    }
}
    

stage('Deploy to Staging') {
        node('gilda-stage') {
            bat 'del /Q /F .env'
            bat 'xcopy /E /H /R /Y        *.*        F:\\GildaSrv\\*.*'
            notify('SUCCESS-Staging')
    }
}

stage('Deploy to Production Approval'){
        input "Deploy to production?"
}
stage('Deploy to Production'){
        node('gilda-prod') {
            bat 'del /Q /F .env'
            bat 'xcopy /E /H /R /Y        *.*        C:\\GildaSrv\\*.*'
            notify('SUCCESS-Production')
        }
}


 
def notify(status){
    emailext (
      to: "devops@email.com",
      subject: "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
    )
} 
 
